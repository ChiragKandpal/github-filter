{"version":3,"sources":["app-constants.tsx","components/Repo-table.tsx","components/filter-sort.tsx","App.tsx","reportWebVitals.ts","components/header.tsx","index.tsx"],"names":["webpageConstants","RepoTable","tableArrayProps","className","map","id","data","src","owner","avatar_url","width","height","alt","name","login","open_issues_count","watchers_count","stargazers_count","description","slice","FilterSort","repoResponseProp","useState","arrNew","setArrNew","repoList","setRepoList","stargazerCountList","setStargazerCountList","openIssueCountList","setOpenIssueCountList","watcherCountList","setWatcherCountList","toggleDropdown","setToggleDropdown","selectedValue","setSelectedValue","activeRepo","setActiveRepo","activeStargazerCount","setActiveStargazerCount","activeOpenIssueCount","setActiveOpenIssueCount","activeWatcherCount","setActiveWatcherCount","repoName","starCount","openCount","watcher","filterParam","setFilterParam","ref","useRef","sortOptionRef","repoResponseCurrent","useEffect","filterArray","filterPropertyName","result","a","sortResult","Array","from","Set","sort","b","handleSortDropdown","e","current","contains","target","document","addEventListener","removeEventListener","repoFilterHandler","applyFilter","Object","entries","forEach","key","value","filter","word","filterDropdownHandle","currTarget","closest","querySelector","classList","toggle","filterSelectHandler","event","filterType","dataset","filterName","Number","sortResultHandler","element","sortDirection","listProperty","sortName","textContent","data-filter-wrapper","onClick","currentTarget","data-filter-list","data-filter-name","data-filter-type","length","data-sort-direction","data-sort-name","App","userName","setUserName","responseData","setResponseData","apiErrorResponse","setApiErrorResponse","apiHandler","fetch","method","then","response","ok","json","Error","catch","error","console","searchRepo","onChange","type","placeholder","required","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Header","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.eeab4f4f.chunk.js","sourcesContent":["export const webpageConstants = {\r\n    webisteTitle: `github repositery search`,\r\n    greetingText: `hello, please enter github username to begin repository search`,\r\n    owner: `-By Chirag Kandpal`,\r\n    userameSearchLabel: `github username`,\r\n    errorText: `user not found`,\r\n    repoNotPresent: `Repositories for selected filter combination are not found`\r\n}","import \"../style/repo-table.scss\";\r\n\r\ninterface Props {\r\n  tableArrayProps: Array<any>;\r\n}\r\nconst RepoTable: React.FC<Props> = ({ tableArrayProps }: Props) => {\r\n  return (\r\n    <div className=\"repo-table__container\">\r\n      {tableArrayProps.map(({ id, ...data }) => (\r\n        <div className=\"repo-card\" key={id}>\r\n          <img\r\n            className=\"avatar-img\"\r\n            src={data.owner.avatar_url}\r\n            width=\"50\"\r\n            height=\"50\"\r\n            alt=\"owner-img\"\r\n          />\r\n          <div className=\"text-data-wrapper\">\r\n            <h4>{data.name}</h4>\r\n            <p><span>owner:</span> {data.owner.login}</p>\r\n            <p>\r\n              <span>Open issues:</span> {data.open_issues_count}\r\n            </p>\r\n            <p>\r\n              <span>watcher:</span> {data.watchers_count}\r\n            </p>\r\n            <p>\r\n              <span>Stargazers:</span> {data.stargazers_count}\r\n            </p>\r\n            <p>\r\n              <span>description:</span> {data.description ? `${data.description.slice(0, 100)}...` : 'none'}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RepoTable;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport RepoTable from \"./Repo-table\";\r\nimport { webpageConstants } from \"../app-constants\";\r\nimport \"../style/filter-sort.scss\";\r\n\r\ninterface sortProps {\r\n  repoResponseProp: Array<any>;\r\n}\r\n\r\nconst FilterSort: React.FC<sortProps> = ({ repoResponseProp }: sortProps) => {\r\n  const [arrNew, setArrNew] = useState<Array<any>>([]);\r\n  const [repoList, setRepoList] = useState<Array<string>>([]);\r\n  const [stargazerCountList, setStargazerCountList] = useState<Array<number>>([]);\r\n  const [openIssueCountList, setOpenIssueCountList] = useState<Array<number>>([]);\r\n  const [watcherCountList, setWatcherCountList] = useState<Array<number>>([]);\r\n  const [toggleDropdown, setToggleDropdown] = useState(false);\r\n  const [selectedValue, setSelectedValue] = useState<string | null>(null);\r\n  const [activeRepo, setActiveRepo] = useState<string | null>(null);\r\n  const [activeStargazerCount, setActiveStargazerCount] = useState<string | null>(null);\r\n  const [activeOpenIssueCount, setActiveOpenIssueCount] = useState<string | null>(null);\r\n  const [activeWatcherCount, setActiveWatcherCount] = useState<string | null>(null);\r\n  const [filterParam, setFilterParam] = useState<{\r\n    repoName: null | string;\r\n    starCount: null | number;\r\n    openCount: null | number;\r\n    watcher: null | number;\r\n  }>({\r\n    repoName: null,\r\n    starCount: null,\r\n    openCount: null,\r\n    watcher: null,\r\n  });\r\n  const ref = useRef<HTMLDivElement>(null);\r\n  const sortOptionRef = useRef<HTMLDivElement>(null);\r\n  let repoResponseCurrent = repoResponseProp;\r\n\r\n  // set filter object to null on username search.\r\n  useEffect(() => {\r\n    setActiveRepo(null);\r\n    setSelectedValue(null);\r\n    setActiveStargazerCount(null);\r\n    setActiveOpenIssueCount(null);\r\n    setActiveWatcherCount(null);\r\n  }, [repoResponseProp]);\r\n\r\n  useEffect(() => {\r\n    setArrNew([...repoResponseCurrent]);\r\n  }, [repoResponseProp, repoResponseCurrent]);\r\n\r\n  // push sorted and non repeatitive values i.e reponame and counts in respective arrays. \r\n  useEffect(() => {\r\n    const filterRepoNameArray = (repoName: string) => {\r\n      let result = repoResponseProp.map((a) => a[repoName]);\r\n      return result;\r\n    };\r\n\r\n    const filterArray = (filterPropertyName: string) => {\r\n      let result = repoResponseProp.map((a) => a[filterPropertyName]);\r\n      let sortResult = [...Array.from(new Set(result))];\r\n      sortResult.sort(function (a, b) {\r\n        return a - b;\r\n      });\r\n      return sortResult;\r\n    };\r\n\r\n    setRepoList(filterRepoNameArray(\"name\"));\r\n    setStargazerCountList(filterArray(\"stargazers_count\"));\r\n    setOpenIssueCountList(filterArray(\"open_issues_count\"));\r\n    setWatcherCountList(filterArray(\"watchers_count\"));\r\n  }, [repoResponseProp]);\r\n\r\n  // handle sort dropdow when clicked outside sort element.\r\n  useEffect(() => {\r\n    const handleSortDropdown = (e: any) => {\r\n      if (toggleDropdown && ref.current && !ref.current.contains(e.target)) {\r\n        setToggleDropdown(false);\r\n      }\r\n    };\r\n    document.addEventListener(\"mousedown\", handleSortDropdown);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleSortDropdown);\r\n    };\r\n  }, [toggleDropdown]);\r\n\r\n  // get filtered array i.e repoResponseCurrent based on option selections.\r\n  const repoFilterHandler = (applyFilter: boolean) => {\r\n    if (applyFilter) {\r\n      Object.entries(filterParam).forEach(([key, value]) => {\r\n        if (value !== null) {\r\n          // eslint-disable-next-line\r\n          repoResponseCurrent = repoResponseCurrent.filter((word) => {\r\n            if (key === \"repoName\") {\r\n              return value === word.name;\r\n            }\r\n            if (key === \"starCount\") {\r\n              return value === word.stargazers_count;\r\n            }\r\n            if (key === \"openCount\") {\r\n              return value === word.open_issues_count;\r\n            }\r\n            if (key === \"watcher\") {\r\n              return value === word.watchers_count;\r\n            }\r\n          });\r\n        }\r\n      });\r\n      setArrNew([...repoResponseCurrent]);\r\n    } else {\r\n      setFilterParam({\r\n        repoName: null,\r\n        starCount: null,\r\n        openCount: null,\r\n        watcher: null,\r\n      });\r\n      setSelectedValue(null);\r\n      setActiveRepo(null);\r\n      setActiveStargazerCount(null);\r\n      setActiveOpenIssueCount(null);\r\n      setActiveWatcherCount(null);\r\n      setArrNew([...repoResponseProp]);\r\n    }\r\n  };\r\n\r\n  // generic filter dropdown handler on filter click.\r\n  const filterDropdownHandle = (currTarget: any) => {\r\n    const filterWrapper = currTarget.closest(\r\n      `[data-filter-wrapper=\"filter-wrapper\"]`\r\n    );\r\n    const filterListContainer = filterWrapper.querySelector(\r\n      `[data-filter-list=\"filter-list\"]`\r\n    );\r\n    filterListContainer.classList.toggle(\"hide\");\r\n  };\r\n\r\n  // on filter option select add selecteed option to filterParam object.\r\n  const filterSelectHandler = (event: any) => {\r\n    const filterType = event.dataset.filterType;\r\n    if (filterType === \"repo-name\") {      \r\n      setFilterParam({ ...filterParam, repoName: event.dataset.filterName ? event.dataset.filterName : null });\r\n      setActiveRepo(event.dataset.filterName ? event.dataset.filterName : null);\r\n    }\r\n    if (filterType === \"stargaze\") {\r\n      setFilterParam({\r\n        ...filterParam,\r\n        starCount: event.dataset.filterName ? Number(event.dataset.filterName) : null,\r\n      });\r\n      setActiveStargazerCount(event.dataset.filterName ? event.dataset.filterName : null);\r\n    }\r\n    if (filterType === \"open-issue\") {\r\n      setFilterParam({\r\n        ...filterParam,\r\n        openCount: event.dataset.filterName ? Number(event.dataset.filterName) : null,\r\n      });\r\n      setActiveOpenIssueCount(event.dataset.filterName ? event.dataset.filterName : null);\r\n    }\r\n    if (filterType === \"watcher\") {\r\n      setFilterParam({\r\n        ...filterParam,\r\n        watcher: event.dataset.filterName ? Number(event.dataset.filterName) : null,\r\n      });\r\n      setActiveWatcherCount(event.dataset.filterName ? event.dataset.filterName : null);\r\n    }\r\n\r\n    filterDropdownHandle(event);\r\n  };\r\n\r\n  // sort ascending and descending count logic.\r\n  const sortResultHandler = (e: any) => {\r\n    repoResponseCurrent = arrNew;\r\n    const element = e.target;\r\n    const sortDirection =\r\n      element.dataset.sortDirection === \"asc\" ? true : false;\r\n    const listProperty =\r\n      element.dataset.sortName === \"star\"\r\n        ? \"stargazers_count\"\r\n        : element.dataset.sortName === \"open\"\r\n        ? \"open_issues_count\"\r\n        : element.dataset.sortName === \"watcher\"\r\n        ? \"watchers_count\"\r\n        : \"\";\r\n    repoResponseCurrent = repoResponseCurrent.sort((a, b) => {\r\n      if (sortDirection) {\r\n        return a[listProperty] - b[listProperty];\r\n      } else {\r\n        return b[listProperty] - a[listProperty];\r\n      }\r\n    });\r\n\r\n    setArrNew([...repoResponseCurrent]);\r\n    setSelectedValue(element.textContent);\r\n    setToggleDropdown(false);\r\n  };\r\n\r\n  // handle sort list dropdown on sort button click.\r\n  const sortdropDownHandler = () => {\r\n    setToggleDropdown(!toggleDropdown);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"filter-sort__container\">\r\n        <div className=\"filter-sort__filter-wrapper\">\r\n          repository:{\" \"}\r\n          <div\r\n            data-filter-wrapper=\"filter-wrapper\"\r\n            className=\"filter-each-wrapper\"\r\n          >\r\n            <div\r\n              className=\"active-filter\"\r\n              onClick={(e) => filterDropdownHandle(e.currentTarget)}\r\n            >\r\n              {activeRepo ? activeRepo : `All`}\r\n            </div>\r\n            <div\r\n              data-filter-list=\"filter-list\"\r\n              className=\"filter-list-container overlap-clear hide\"\r\n            >\r\n              <div\r\n                className=\"filter-option\"\r\n                data-filter-name={null}\r\n                data-filter-type=\"repo-name\"\r\n                onClick={(e) => filterSelectHandler(e.target)}\r\n              >All</div>\r\n              {repoList &&\r\n                repoList.map((value) => (\r\n                  <div key={value}>\r\n                    <div\r\n                      className=\"filter-option\"\r\n                      data-filter-name={value}\r\n                      data-filter-type=\"repo-name\"\r\n                      onClick={(e) => filterSelectHandler(e.target)}\r\n                    >\r\n                      {value}\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n          <div className=\"count-filter\">\r\n            <div\r\n              data-filter-wrapper=\"filter-wrapper\"\r\n              className=\"filter-each-wrapper\"\r\n            >\r\n              Starsgazers:\r\n              <div\r\n                className=\"active-filter\"\r\n                onClick={(e) => filterDropdownHandle(e.currentTarget)}\r\n              >\r\n                {activeStargazerCount ? activeStargazerCount : `All`}\r\n              </div>\r\n              <div\r\n                data-filter-list=\"filter-list\"\r\n                className=\"filter-list-container hide\"\r\n              >\r\n                <div\r\n                  className=\"filter-option\"\r\n                  data-filter-name={null}\r\n                  data-filter-type=\"stargaze\"\r\n                  onClick={(e) => filterSelectHandler(e.target)}\r\n                >All</div>\r\n                {stargazerCountList &&\r\n                  stargazerCountList.map((value) => (\r\n                    <div key={value}>\r\n                      <div\r\n                        className=\"filter-option\"\r\n                        data-filter-name={value}\r\n                        data-filter-type=\"stargaze\"\r\n                        onClick={(e) => filterSelectHandler(e.target)}\r\n                      >\r\n                        {value}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n            <div\r\n              data-filter-wrapper=\"filter-wrapper\"\r\n              className=\"filter-each-wrapper\"\r\n            >\r\n              Open issues:\r\n              <div\r\n                className=\"active-filter\"\r\n                onClick={(e) => filterDropdownHandle(e.currentTarget)}\r\n              >\r\n                {activeOpenIssueCount ? activeOpenIssueCount : `All`}\r\n              </div>\r\n              <div\r\n                data-filter-list=\"filter-list\"\r\n                className=\"filter-list-container hide\"\r\n              >\r\n                <div\r\n                  className=\"filter-option\"\r\n                  data-filter-name={null}\r\n                  data-filter-type=\"open-issue\"\r\n                  onClick={(e) => filterSelectHandler(e.target)}\r\n                >All</div>\r\n                {openIssueCountList &&\r\n                  openIssueCountList.map((value) => (\r\n                    <div key={value}>\r\n                      <div\r\n                        className=\"filter-option\"\r\n                        data-filter-name={value}\r\n                        data-filter-type=\"open-issue\"\r\n                        onClick={(e) => filterSelectHandler(e.target)}\r\n                      >\r\n                        {value}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n            <div\r\n              data-filter-wrapper=\"filter-wrapper\"\r\n              className=\"filter-each-wrapper\"\r\n            >\r\n              Watchers:\r\n              <div\r\n                className=\"active-filter\"\r\n                onClick={(e) => filterDropdownHandle(e.currentTarget)}\r\n              >\r\n                {activeWatcherCount ? activeWatcherCount : `All`}\r\n              </div>\r\n              <div\r\n                data-filter-list=\"filter-list\"\r\n                className=\"filter-list-container hide\"\r\n              >\r\n                <div\r\n                  className=\"filter-option\"\r\n                  data-filter-name={null}\r\n                  data-filter-type=\"watcher\"\r\n                  onClick={(e) => filterSelectHandler(e.target)}\r\n                >All</div>\r\n                {watcherCountList &&\r\n                  watcherCountList.map((value) => (\r\n                    <div key={value}>\r\n                      <div\r\n                        className=\"filter-option\"\r\n                        data-filter-name={value}\r\n                        data-filter-type=\"watcher\"\r\n                        onClick={(e) => filterSelectHandler(e.target)}\r\n                      >\r\n                        {value}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button className=\"btn-blue btn-all\" onClick={() => repoFilterHandler(true)}>\r\n          apply filters\r\n        </button>\r\n        <button className=\"btn-clear btn-all\" onClick={() => repoFilterHandler(false)}>\r\n          clear filters & sort\r\n        </button>\r\n\r\n        {arrNew.length > 0 && (\r\n          <div className=\"filter-sort__sort-wrapper\">\r\n            Sort By\r\n            <div className=\"sort-body\" ref={ref}\r\n            onClick={sortdropDownHandler}>\r\n              <div className=\"current-sort js-selected-sort\">\r\n                {selectedValue ? selectedValue : `None`}\r\n              </div>\r\n              {toggleDropdown && (\r\n                <ul className=\"sort-list\">\r\n                  <li>\r\n                    <div\r\n                      ref={sortOptionRef}\r\n                      data-sort-direction=\"asc\"\r\n                      data-sort-name=\"star\"\r\n                      onClick={(e) => sortResultHandler(e)}\r\n                    >\r\n                      star count (asc)\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div\r\n                      data-sort-direction=\"desc\"\r\n                      data-sort-name=\"star\"\r\n                      onClick={(e) => sortResultHandler(e)}\r\n                    >\r\n                      star count (dec)\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div\r\n                      data-sort-direction=\"asc\"\r\n                      data-sort-name=\"open\"\r\n                      onClick={(e) => sortResultHandler(e)}\r\n                    >\r\n                      open issue count (asc)\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div\r\n                      data-sort-direction=\"desc\"\r\n                      data-sort-name=\"open\"\r\n                      onClick={(e) => sortResultHandler(e)}\r\n                    >\r\n                      open issue count (dec)\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div\r\n                      data-sort-direction=\"asc\"\r\n                      data-sort-name=\"watcher\"\r\n                      onClick={(e) => sortResultHandler(e)}\r\n                    >\r\n                      watcher count (asc)\r\n                    </div>\r\n                  </li>\r\n                  <li>\r\n                    <div\r\n                      data-sort-direction=\"desc\"\r\n                      data-sort-name=\"watcher\"\r\n                      onClick={(e) => sortResultHandler(e)}\r\n                    >\r\n                      watcher count (dec)\r\n                    </div>\r\n                  </li>\r\n                </ul>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {arrNew.length > 0 ? (\r\n        <RepoTable tableArrayProps={arrNew} />\r\n      ) : (\r\n        <div className=\"filter-error-msg\">{webpageConstants.repoNotPresent}</div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterSort;\r\n","import React, { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { webpageConstants } from \"./app-constants\";\nimport FilterSort from \"./components/filter-sort\";\nimport \"./style/App.scss\";\n\nconst App: React.FC = () => {\n  const [userName, setUserName] = useState(\"\");\n  const [responseData, setResponseData] = useState<Array<any>>([]);\n  const [apiErrorResponse, setApiErrorResponse] = useState<boolean>(false);\n\n    // API response and error handler\n  const apiHandler = async (userName: string) => {\n    if (userName) {\n      await fetch(`https://api.github.com/users/${userName}/repos`, {\n        method: \"GET\",\n      })\n        .then((response) => {\n          if (response.ok) {\n            return response.json();\n          } else {\n            setResponseData([]);\n            throw new Error(\"User not found\");\n          }\n        })\n        .then((data) => {\n          if (data.length > 0) {\n            setResponseData(data);\n            setApiErrorResponse(false);\n          } else {\n            setApiErrorResponse(true);\n            setResponseData([]);\n            throw new Error(\"User not found\");\n          }\n        })\n        .catch((error) => {\n          setApiErrorResponse(true);\n          console.error(\"Error:\", error);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (!userName) setResponseData([]);\n  }, [userName]);\n\n  const searchRepo = async () => {\n    await apiHandler(userName);    \n  };\n\n  // clear repository search on clear button click\n  const clearSearch = () => {\n    setUserName(\"\");\n    setApiErrorResponse(false);\n    setResponseData([]);\n  };\n  return (\n    <>\n      <div className=\"username-search__container\">\n        <div className=\"search-label\">\n          <label>{webpageConstants.userameSearchLabel}</label>\n          <div>\n            <input\n              value={userName}\n              onChange={(e) => setUserName(e.target.value)}\n              type=\"text\"\n              placeholder=\"Username\"\n              required\n            />\n            <button className=\"btn-all btn-blue\" onClick={searchRepo}>\n              Search\n            </button>\n            {userName && (\n              <button className=\"btn-all btn-clear\" onClick={clearSearch}>\n                Clear\n              </button>\n            )}\n          </div>\n        </div>\n        {userName.length <= 0 && (\n          <div className=\"start-page-text\"><p>{webpageConstants.greetingText}</p><p>{webpageConstants.owner}</p></div>\n        )}\n        {apiErrorResponse && <div className=\"start-page-text\">{webpageConstants.errorText}</div>}\n      </div>\n      {!apiErrorResponse && userName && responseData.length > 0 && (\n        <FilterSort repoResponseProp={responseData} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport { webpageConstants } from \"../app-constants\";\r\nimport \"../style/header.scss\";\r\n\r\nconst Header = () => {\r\n  return <h1 className=\"title\">{webpageConstants.webisteTitle}</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Header from './components/header';\nimport './index.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Header />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}